import{_ as e,o as s,c as a,a as t}from"./app.74eca79f.js";const v=JSON.parse('{"title":"Reactive Collections","description":"","frontmatter":{},"headers":[],"relativePath":"guides/collections.md"}'),n={name:"guides/collections.md"},l=t(`<h1 id="reactive-collections" tabindex="-1">Reactive Collections <a class="header-anchor" href="#reactive-collections" aria-hidden="true">#</a></h1><blockquote class="em"><p>Starbeam&#39;s reactive collections have the identical API as the built-in JavaScript APIs they are based on.</p></blockquote><p>Starbeam ships with a number of built-in reactive collections.</p><ul><li>Reactive Object</li><li>Reactive Array</li><li>Reactive Map and WeakMap</li><li>Reactive Set and WeakSet</li></ul><p>From a usage perspective, these collections identical to their JavaScript counterparts. Instances of reactive collections have exactly the same methods as their JavaScript counterparts, and those methods behave identically.</p><p><strong>The only distinction</strong> is that when you mutate a reactive collection, any formula or resource that used the collection as an input will invalidate.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is even true in TypeScript: when you use a reactive collection in TypeScript, its type is literally the same as the JavaScript type.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> reactive </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@starbeam/js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> reactive</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// typeof map is Map&lt;string, number&gt;</span></span>
<span class="line"></span></code></pre></div></div>`,7),o=[l];function c(i,p,r,y,d,h){return s(),a("div",null,o)}var D=e(n,[["render",c]]);export{v as __pageData,D as default};
