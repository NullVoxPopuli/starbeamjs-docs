import{_ as e,o as t,c as a,a as r}from"./app.954a3460.js";const i={},o=r('<h1 id="rendering-values" tabindex="-1"><a class="header-anchor" href="#rendering-values" aria-hidden="true">#</a> Rendering Values</h1><p>The most fundamental responsibility of a renderer is to render reactive values into the output.</p><h2 id="identify-the-component-concept" tabindex="-1"><a class="header-anchor" href="#identify-the-component-concept" aria-hidden="true">#</a> Identify the Component Concept</h2><p>The first step in building a renderer for a framework is to identify the component concept in the framework in question.</p><p>The component should:</p><ol><li>Have a unique instance for each time it&#39;s used.</li><li>Provide a way for user-supplied code to turn values into a DOM fragment.</li><li>Provide a way for the user to run code when the component is removed from the DOM.</li><li>Provide a way for the user to notify the framework that an update might be required.</li></ol><h2 id="provide-a-user-facing-api" tabindex="-1"><a class="header-anchor" href="#provide-a-user-facing-api" aria-hidden="true">#</a> Provide a User-Facing API</h2><p>Your primary job is to provide an idiomatic API that provides the user with a way to read reactive values into the template or JSX-style syntax that the framework uses.</p><p>Critically, you will need to make sure sure that all reactive reads are performed inside a single function, which also produces the output template.</p><blockquote></blockquote>',10),n=[o];function s(d,h){return t(),a("div",null,n)}var l=e(i,[["render",s],["__file","1-render-values.html.vue"]]);export{l as default};
