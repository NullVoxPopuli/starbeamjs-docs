import{_ as a,r as s,o as t,c as o,d as i,a as n}from"./app.25314965.js";const p={},r=n('<h1 id="rendering-into-a-value" tabindex="-1"><a class="header-anchor" href="#rendering-into-a-value" aria-hidden="true">#</a> Rendering Into a Value</h1><p>The first kind of renderer is a Render-Into-Value renderer.</p><p>This kind of renderer is for components that return a value for each render, such as JSX.</p><p>If your component render is fundamentally a function that reads from reactive values and produces a value, then your job is relatively easy. You need to:</p><ol><li>Figure out how to notify the framework that you want it to re-render.</li><li>Figure out how to get a representation of the &quot;component instance&quot;, which you will link resource lifetimes to.</li></ol><h2 id="phases" tabindex="-1"><a class="header-anchor" href="#phases" aria-hidden="true">#</a> Phases</h2><p>A value renderer goes through the following phases:</p><ol><li><strong>Initial Render.</strong> This is the first time the component is rendered, and the first time that the user&#39;s component code returns the value representing the DOM. Structurally, this code reads from reactive values and returns a value representing the DOM.</li><li><strong>User Actions:</strong> User code (e.g. event handlers or async continuation) is executed, and it mutates reactive values. This phase happens outside of your explicit code: any user code that runs outside of a render phase is considered an &quot;action&quot;.</li><li><strong>Notify:</strong> Starbeam notifies your render handler that a user action has mutated an input that was used in the last render phase. In the handler, you should notify the framework that a re-render is needed.</li><li><strong>Updating Render:</strong> The framework invokes your component again, and is expecting you to return a new value representing the DOM. Structurally, this code reads (again) from reactive values and returns a value representing the DOM.</li></ol>',8),c=n(`<h2 id="a-simple-example-jsx" tabindex="-1"><a class="header-anchor" href="#a-simple-example-jsx" aria-hidden="true">#</a> A Simple Example (JSX)</h2><section class="both-lang"><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Cell <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@starbeam/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useResource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@starbeam/use-resource&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// useResource is a React hook that gets called when the component is mounted. Its</span>
  <span class="token comment">// cleanup runs when the component is unmounted.</span>
  <span class="token comment">//</span>
  <span class="token comment">// \`useResource\` handles the fact that React 18+ may mount and unmount a component multiple</span>
  <span class="token comment">// times by considering each mount/unmount as a complete resource lifecycle.</span>
  <span class="token keyword">const</span> clock <span class="token operator">=</span> <span class="token function">useResource</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token function">Cell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      cell<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    resource<span class="token punctuation">.</span>on<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> cell<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">useReactive</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>clock<span class="token punctuation">.</span>current<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></section><h2 id="identify-the-component-concept" tabindex="-1"><a class="header-anchor" href="#identify-the-component-concept" aria-hidden="true">#</a> Identify the Component Concept</h2><p>The first step in building a renderer for a framework is to identify the component concept in the framework in question.</p><p>The component should:</p><ol><li>Have a unique instance for each time it&#39;s used.</li><li>Provide a way for user-supplied code to turn values into a DOM fragment.</li><li>Provide a way for the user to run code when the component is removed from the DOM.</li><li>Provide a way for the user to notify the framework that an update might be required.</li></ol><h2 id="provide-a-user-facing-api" tabindex="-1"><a class="header-anchor" href="#provide-a-user-facing-api" aria-hidden="true">#</a> Provide a User-Facing API</h2><p>Your primary job is to provide an idiomatic API that provides the user with a way to read reactive values into the template or JSX-style syntax that the framework uses.</p><p>Critically, you will need to make sure sure that all reactive reads are performed inside a single function, which also produces the output template.</p><blockquote></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11);function l(u,d){const e=s("Mermaid");return t(),o("div",null,[r,i(e,{id:"mermaid-382ee1c3",code:"%25%25%7Binit%3A%20%7B%22theme%22%3A%22neutral%22%2C%22themeVariables%22%3A%7B%22fontFamily%22%3A%22Azeret%20Mono%22%7D%2C%22flowchart%22%3A%7B%22curve%22%3A%22linear%22%2C%22htmlLabels%22%3Atrue%7D%2C%22themeCSS%22%3A%22*%20%7B%20box-sizing%3A%20border-box%20%7D%20foreignObject%20%7B%20%20display%3A%20block%3B%20%7D%20span%20%7B%20%20all%3Arevert%3B%20font-display%3A%20block%3B%20%20text-size-adjust%3A%20100%25%3B%20font-size%3A%201rem%3B%20line-height%3A%201.4%3B%20box-sizing%3A%20border-box%3B%20display%3A%20inline-block%3B%20white-space%3A%20nowrap%3B%20%7D%20b%20%7B%20font-weight%3A%20normal%3B%20color%3A%20%23666%3B%20%7D%20span.nodeLabel%20%7B%20width%3A%20max-content%3B%20max-width%3A60ch%3B%20white-space%3Anormal%3B%20overflow-wrap%3A%20break-word%3B%20%20%7D%20.lifecycle%20span%20span.nodeLabel%2C%20span.edgeLabel%2C%20g.node.note%20foreignObject%20div%20span.nodeLabel%20%7B%20line-height%3A%201.35%3B%20%20padding%3A0%20%20%7D%20%20g.node.lifecycle%20span.nodeLabel%20%7B%20font-weight%3A%20bold%3B%20%7D%20%20.lifecycle%20span.nodeLabel%20%7B%20color%3A%20%23a00%20%7D%20%20.lifecycle%20span.nodeLabel%20span%20%7B%20font-size%3A%2080%25%3B%20font-weight%3A%20bold%3B%20padding-inline%3A%200.5rem%3B%20padding-block-end%3A%200.2rem%3B%20border-radius%3A%200.5ch%3B%20background-color%3A%20%23eb9%3B%20color%3A%20%23975%3B%20%7D%20span.edgeLabel%3Anot(%3Aempty)%20%7B%20padding%3A%200.5rem%3B%20color%3A%20%23999%3B%20background-color%3A%20%23eee%20%7D%22%7D%7D%25%25%0Aflowchart%20TB%0A%20%20Initial%20--%3E%20Repeat%0A%20%20subgraph%20Repeat%0A%20%20%20%20%20Actions%20--%3E%20Notify%20--%3E%20Updating%0A%20%20end%0A%20%20%0A%20%20Initial%5BInitial%20Render%5D%0A%20%20Actions%5BUser%20Actions%5D%0A%20%20Notify%5BNotify%5D%0A%20%20Updating%5BUpdating%20Render%5D%0A%20%20"}),c])}var m=a(p,[["render",l],["__file","1-render-values.html.vue"]]);export{m as default};
