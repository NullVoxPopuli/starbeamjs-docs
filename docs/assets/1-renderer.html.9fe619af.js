import{_ as o,r as p,o as c,c as l,d as u,w as a,a as t,b as n,e as s}from"./app.25314965.js";const i={},r=t('<h1 id="rendering" tabindex="-1"><a class="header-anchor" href="#rendering" aria-hidden="true">#</a> Rendering</h1><p>You can render a reactive value using the <code>TIMELINE.render</code> function.</p><div class="custom-container tip"><p class="custom-container-title">What is a reactive value?</p><ul><li>Cell</li><li>Formula</li><li>Formula List</li><li>Resource</li><li>Resource List</li></ul><p>Under the hood, a reactive value implements <code>ReactiveProtocol</code>, which means that it can <em>produce a correct list of dependencies</em> on demand.</p></div>',3),k=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Cell"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"TIMELINE"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@starbeam/core"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Cell"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"John"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" element "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),s(`
  `),n("span",{class:"token string"},'"#output"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(" HTMLDivElement"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token constant"},"TIMELINE"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  element`),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},"."),s("current"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Cell"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"TIMELINE"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@starbeam/core"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Cell"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"John"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" element "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"#output"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token constant"},"TIMELINE"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  element`),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},"."),s("current"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=t(`<p>Here&#39;s an example of rendering a cell into the DOM using vanilla JavaScript:</p><p>::: normal-demo</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>output<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> Cell<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> <span class="token constant">TIMELINE</span><span class="token punctuation">,</span> <span class="token constant">LIFETIME</span> <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>
      <span class="token string">&quot;https://assets.codepen.io/1630871/starbeam-core.js&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">Cell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token constant">TIMELINE</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    output<span class="token punctuation">.</span>innerText <span class="token operator">=</span> counter<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::::</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In real code, you would probably use a JavaScript framework with one of Starbeam&#39;s framework libraries to render the value.</p><p>This example demonstrates the low-level primitive (<code>TIMELINE.render</code>) that framework adapters are implemented with.</p></div><h2 id="a-more-elaborate-example" tabindex="-1"><a class="header-anchor" href="#a-more-elaborate-example" aria-hidden="true">#</a> A More Elaborate Example</h2>`,7);function v(b,g){const e=p("Code");return c(),l("div",null,[r,u(e,null,{ts:a(()=>[k]),js:a(()=>[d]),_:1}),m])}var f=o(i,[["render",v],["__file","1-renderer.html.vue"]]);export{f as default};
