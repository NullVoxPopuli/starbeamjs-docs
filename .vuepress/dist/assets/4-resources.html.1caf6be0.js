import{_ as n,o as s,c as a,a as e}from"./app.bc742e23.js";const t={},p=e(`<h1 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h1><p>A resource is a reactive computation that needs to be cleaned up when it is no longer used.</p><p>Resources are created with an owner, and whenever the owner is cleaned up, the resource is also cleaned up. This is called <em>ownership linking</em>.</p><p>Typically, a component in your framework will own your resources. The framework renderer will make sure that when your component is <em>unmounted</em>, its associated resources are cleaned up.</p><h2 id="example-ticking-stopwatch" tabindex="-1"><a class="header-anchor" href="#example-ticking-stopwatch" aria-hidden="true">#</a> Example: Ticking Stopwatch</h2><p>Let&#39;s illustrate the idea of a resource by creating a stopwatch that uses a <code>setInterval</code> to tick. By using a Starbeam resource, we can ensure that the stopwatch is stopped when the owner is cleaned up.</p><p>;;; ./$snippets/resources.ts#stopwatch</p><p>::: \u{1F4A1} A resource&#39;s return value is a function that computes the value of the resource whenever its dependencies change. :::</p><h3 id="demo-rendering-the-stopwatch" tabindex="-1"><a class="header-anchor" href="#demo-rendering-the-stopwatch" aria-hidden="true">#</a> <strong class="marker">demo</strong> rendering the stopwatch</h3><p>::: normal-demo</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>output<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>finalize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Finalize the Stopwatch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#finalize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> Cell<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> <span class="token constant">TIMELINE</span><span class="token punctuation">,</span> <span class="token constant">LIFETIME</span> <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>
      <span class="token string">&quot;https://assets.codepen.io/1630871/starbeam.js&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> Stopwatch <span class="token operator">=</span> <span class="token function">Resource</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">Cell</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      time<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    r<span class="token punctuation">.</span>on<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> now <span class="token operator">=</span> time<span class="token punctuation">.</span>current<span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">hour</span><span class="token operator">:</span> <span class="token string">&quot;numeric&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">minute</span><span class="token operator">:</span> <span class="token string">&quot;numeric&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token string">&quot;numeric&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hour12</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Instantiate the Stopwatch with an owner. We will</span>
  <span class="token comment">// later finalize the owner to clean up the resource.</span>
  <span class="token comment">// In this case, that will clear the interval and</span>
  <span class="token comment">// stop the watch from ticking.</span>
  <span class="token keyword">const</span> owner <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> stopwatch <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    owner<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Render the stopwatch into the DOM. The \`render\`</span>
  <span class="token comment">// callback will be called whenever the stopwatch&#39;s</span>
  <span class="token comment">// value changes.</span>
  <span class="token comment">//</span>
  <span class="token comment">// In this case, that will happen whenever the \`time\`</span>
  <span class="token comment">// cell in the resource is set.</span>
  <span class="token constant">TIMELINE</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    output<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The current time is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stopwatch<span class="token punctuation">.</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token constant">LIFETIME</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token number">3000</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::::</p><h2 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle" aria-hidden="true">#</a> Lifecycle</h2><p>Let&#39;s take a look at an example of a resource that receives messages on a channel, and returns a string representing the last message it received.</p><p>::: note In this example, the channel name that we&#39;re subscribing to is dynamic, and we want to unsubscribe from the channel whenever the channel name changes, but <em>not</em> when we get a new message. :::</p><p>;;; ./$snippets/resource-lifecycle.ts#define-resource</p><p><code>ChannelResource</code> is a JavaScript function that takes the channel name as a reactive input and returns a resource constructor.</p><p>That resource constructor starts by subscribing to the current value of the <code>channelName</code>, and then telling starbeam to unsubscribe from the channel when the resource is cleaned up.</p><p>It then creates a cell that holds the last message it received on the channel, and returns a function that returns that message as a formatted string (or a helpful message if the channel hasn&#39;t received any messages yet).</p><p>At this point, let&#39;s take a look at the dependencies:</p><div class="language-deps ext-deps line-numbers-mode"><pre class="language-deps"><code>resource:::chart-resource

channelName
subgraph resource [ChannelResource]
lastMessage
end
resource --&gt; channelName
Output --&gt; channelName
Output --&gt; lastMessage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our output depends on the channel name and the last message received on that channel. The <code>lastMessage</code> depends on the channel name as well, and whenever the channel name changes, the resource is cleaned up and the channel is unsubscribed.</p><p><strong>If we receive a new message</strong>, the <code>lastMessage</code> cell is set to the new message. This invalidates <code>lastMessage</code> and therefore the output as well.</p><div class="language-deps ext-deps line-numbers-mode"><pre class="language-deps"><code>resource:::chart-resource

channelName
subgraph resource [ChannelResource]
lastMessage:::invalidated
end
Output:::invalidated
resource
resource --&gt; channelName
Output --&gt; channelName
Output --&gt; lastMessage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, this does <strong>not</strong> invalidate the resource itself, so the channel subscription remains active.</p><p>On the other hand, <strong>if we change the <code>channelName</code></strong>, that invalidates the <code>ChannelResource</code> itself.</p><div class="language-deps ext-deps line-numbers-mode"><pre class="language-deps"><code>resource:::chart-resource
classDef default font-family:monospace

channelName:::invalidated
subgraph resource [ChannelResource]
  lastMessage:::inactive
end
Output:::inactive
resource:::invalidated
resource --&gt; channelName
Output --&gt; channelName
Output --&gt; lastMessage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a result, the resource will be cleaned up and the channel unsubscribed. After that, the resource will be re-created from the new <code>channelName</code>, and the process will continue.</p><p>::: emphasis From the perspective of the creator of a resource, the resource represents a stable reactive value. :::</p><details class="custom-container details"><summary>Under the Hood</summary><p>Under the hood, the internal <code>ChannelResource</code> instance is cleaned up and recreated whenever <strong>its</strong> inputs change. However, the resource you got back when you <code>create</code>d it remains the same.</p><p>That&#39;s what makes it possible to pass a resource to <code>TIMELINE.render</code> and have it continue to work even when the internal resource is torn down and recreated.</p></details>`,31),c=[p];function o(i,l){return s(),a("div",null,c)}var r=n(t,[["render",o],["__file","4-resources.html.vue"]]);export{r as default};
