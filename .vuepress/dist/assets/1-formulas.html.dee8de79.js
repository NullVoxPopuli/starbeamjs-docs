import{_ as n,r as i,o as r,c as l,b as e,e as a,w as s,d as t,a as c}from"./app.bc742e23.js";const u={},h=e("h1",{id:"formula-functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#formula-functions","aria-hidden":"true"},"#"),t(" Formula Functions")],-1),d=e("p",null,"While you can always use normal functions to compute values based on cells, you can also turn functions into formulas:",-1),p=e("li",null,"Formulas recompute only when any reactive state used in the formula changes.",-1),m=t("You can render a formula into the DOM. Check out the "),f=t("Rendering"),_=t(" section for more information."),y=c('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>In practice, it&#39;s very uncommon for the overhead of formula functions to outweigh the cost of JavaScript functions, even if they iterate a medium-sized list and do some work for each entry.</p></div><p>To create a formula, pass a function to <code>Formula</code>.</p><p>;;; ./$snippets/formulas.ts#create-formula</p><p>And you use the formula the same way as a function.</p><p>;;; ./$snippets/formulas.ts#use-the-same-way</p><h2 id="with-props" tabindex="-1"><a class="header-anchor" href="#with-props" aria-hidden="true">#</a> With Props</h2><p>You can also pass props into formula functions. The props are passed into the formula function as the first argument, and the formula function will invalidate:</p><ol><li>When any reactive state used in the formula changes.</li><li>When the props aren&#39;t the same as the props the last time you called the function.</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><em>You can customize this behavior by specifying an <code>equals</code> option.</em> See <a href="#equality">Equality</a> below.</p></div><p>;;; ./$snippets/formulas-with-props.ts#create-formula</p><p>If you call the same formula function with the same props, it will return the same value.</p><p>;;; ./$snippets/formulas-with-props.ts#use-the-same-way</p><h3 id="equality" tabindex="-1"><a class="header-anchor" href="#equality" aria-hidden="true">#</a> Equality</h3><p>If you want to control how the props are compared to determine if the formula needs to be invalidated, you can specify an <code>equals</code> option.</p><p>;;; ./$snippets/formulas-with-props.ts#with-equals</p>',15),w={class:"custom-container warning"},v=e("p",{class:"custom-container-title"},"WARNING",-1),b=t("As with the "),g=t("equality example in Cells"),x=t(", this example using "),q=e("code",null,"Object.is",-1),k=t(" to demonstrate when the formula is invalidated."),I=t("In actual code, it is unlikely that you should care about the identity of a formula's return value. If you "),N=e("strong",null,"do",-1),F=t(" care about a formula's identity, there's a good chance that you want a "),R=t("Resource"),T=t(", which are like formulas, but with explicit control over the identity of the value and its cleanup.");function W($,C){const o=i("RouterLink");return r(),l("div",null,[h,d,e("ol",null,[p,e("li",null,[m,a(o,{to:"/src/guides/5-advanced/1-renderer.html"},{default:s(()=>[f]),_:1}),_])]),y,e("div",w,[v,e("p",null,[b,a(o,{to:"/src/guides/2-fundamentals/1-cells.html#equality"},{default:s(()=>[g]),_:1}),x,q,k]),e("p",null,[I,N,F,a(o,{to:"/src/guides/2-fundamentals/4-resources.html"},{default:s(()=>[R]),_:1}),T])])])}var A=n(u,[["render",W],["__file","1-formulas.html.vue"]]);export{A as default};
